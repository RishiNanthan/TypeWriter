{"version":3,"sources":["components/KeyBoard.js","components/View.js","App.js","serviceWorker.js","index.js"],"names":["ROW1","ROW2","ROW3","KeyBoard","props","get_key_row","bind","get_key_column","shouldComponentUpdate","nextProps","nextState","error_key","this","highlight_key","s","error","highlight","row","i","length","toUpperCase","push","c","class_name","console","log","className","key","Component","View","letters","no_letters","chars","get_characters","state","characters","previous_characters","value","changeHandler","n","v","Math","floor","random","list","event","persist","word","target","letter","previous_word","slice","setState","cur","get_list_for_chars","type","autoFocus","onChange","App","style","color","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.dbb47fd6.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\nconst ROW1 = ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P'];\r\nconst ROW2 = ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ';'];\r\nconst ROW3 = ['Z', 'X', 'C', 'V', 'B', 'N', 'M', ',', '.', '/'];\r\n\r\nexport default class KeyBoard extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.get_key_row = this.get_key_row.bind(this);\r\n        this.get_key_column = this.get_key_column.bind(this);\r\n        this.shouldComponentUpdate = this.shouldComponentUpdate.bind(this);\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        let update = nextProps.error_key !== this.props.error_key || nextProps.highlight_key !== this.props.highlight_key; \r\n        return update;\r\n    }\r\n\r\n    get_key_row(s){\r\n        let row = [];\r\n        let error;\r\n        let highlight;\r\n\r\n        for(let i=0; i<s.length; i++){\r\n            error = false;\r\n            highlight = false;\r\n            if(this.props.error_key !== null && this.props.error_key.toUpperCase() === s[i].toUpperCase())\r\n                error = true;\r\n            else if(this.props.highlight_key !== null && this.props.highlight_key.toUpperCase() === s[i].toUpperCase())\r\n                highlight = true;\r\n            row.push(this.get_key_column(s[i], error, highlight));\r\n        }\r\n        return row;\r\n    }\r\n\r\n    get_key_column(c, error, highlight){\r\n        let class_name = \"key\";\r\n        if(error)\r\n            class_name += \" error-key\";\r\n        else if(highlight)\r\n            class_name += \" highlight-key\";\r\n        console.log(error + \" \" + highlight);\r\n        console.log(c + \"  \" + class_name);\r\n        return (\r\n            <div className={class_name} key={c}>{ c.toUpperCase() }</div>\r\n        );\r\n    }\r\n\r\n    render(){        \r\n        return(\r\n            <div className=\"keyboard\">\r\n                <div className=\"key-row\" key=\"row1\">\r\n                    { this.get_key_row(ROW1) }\r\n                </div>\r\n                <div className=\"key-row\" key=\"row2\">\r\n                    { this.get_key_row(ROW2) }\r\n                </div>\r\n                <div className=\"key-row\" key=\"row3\">\r\n                    { this.get_key_row(ROW3) }\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport KeyBoard from './KeyBoard';\r\n\r\n\r\nconst PREV_WORD_LEN = 5;\r\nconst CURR_WORD_LEN = 10;\r\n\r\nexport default class View extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.letters = props.letters;\r\n        this.no_letters = 0;\r\n\r\n        var chars = this.get_characters(CURR_WORD_LEN);\r\n        \r\n        this.state = {\r\n            characters: chars,\r\n            previous_characters: \"\",\r\n            value: \"\",\r\n            error_key: null,\r\n            highlight_key: chars[0],\r\n        }\r\n\r\n        this.get_characters = this.get_characters.bind(this);\r\n        this.changeHandler = this.changeHandler.bind(this);\r\n    }\r\n\r\n    get_characters(n){\r\n        var c = \"\";\r\n        for(var i=0; i<n; i++){\r\n            var v = Math.floor( Math.random()*100 ) % this.letters.length;\r\n            c += this.letters[v];\r\n        }\r\n        return c;\r\n    }\r\n\r\n    get_list_for_chars(s, className=null){\r\n        var list = [];\r\n        for(var i=0; i<s.length; i++){\r\n            list.push(\r\n                <div className={className} key={this.no_letters}>{ s[i] === \" \" ? \"space\" : s[i] }</div>\r\n            );\r\n            this.no_letters += 1;\r\n        }\r\n        return list;\r\n    }\r\n\r\n    changeHandler(event){\r\n        event.persist();\r\n        var word = event.target.value;\r\n        var letter = word[word.length-1];\r\n        var previous_word = this.state.previous_characters\r\n        if(previous_word.length === PREV_WORD_LEN){\r\n            previous_word = previous_word.slice(1) + letter;\r\n        }\r\n        else{\r\n            previous_word += letter;\r\n        }\r\n\r\n        if(letter === this.state.characters[0]){\r\n            this.setState((cur)=>{\r\n                return {\r\n                    characters: cur.characters.slice(1) + this.get_characters(1),\r\n                    previous_characters: previous_word,\r\n                    value: word,\r\n                    highlight_key: cur.characters[1],\r\n                    error_key: null,\r\n                }\r\n            });\r\n        }\r\n        else if(letter !== \" \"){\r\n            this.setState((cur)=>{\r\n                return {\r\n                    ...cur,\r\n                    error_key: letter,\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    //<KeyBoard error_key={this.state.error_key} highlight_key={this.state.highlight_key}/>\r\n\r\n    render(){\r\n        console.log(this.state.error_key);\r\n        console.log(this.state.highlight_key)\r\n        return (\r\n            <div>\r\n                <div className=\"characters\">\r\n                    { this.get_list_for_chars(this.state.previous_characters, \"list\")}\r\n                    <div className=\"highlight\">\r\n                        { this.state.characters[0] === \" \" ? \"space\" : this.state.characters[0] }\r\n                    </div>\r\n                    { this.get_list_for_chars(this.state.characters.slice(1), \"list\")}\r\n                </div>\r\n                <div>\r\n                    <center>\r\n                        <input className=\"inputchars\" type=\"text\" value={this.state.value} autoFocus onChange={this.changeHandler}/>\r\n                    </center>\r\n                </div>\r\n                <center>\r\n                    <KeyBoard error_key={this.state.error_key} highlight_key={this.state.characters[0]}/>\r\n                </center>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport View from './components/View'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 style={{color: \"blueviolet\"}}>Type Writer</h1>\n      </header>\n      <div className=\"content\">\n        <View letters=\"abcd efghi jklmno pqrs tuv wxyz;,.\"/>\n      </div>\n      <footer></footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}